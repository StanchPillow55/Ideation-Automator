import os,json,boto3; from typing import Dict,Any,List
from markdown import markdown as md_to_html; from pptx import Presentation; from reportlab.lib.pagesizes import letter; from reportlab.pdfgen import canvas
ED=os.getenv("EXPORTS_DIR","/data/exports"); ME=os.getenv("MINIO_ENDPOINT","http://minio:9000"); AK=os.getenv("MINIO_ACCESS_KEY","admin"); SK=os.getenv("MINIO_SECRET_KEY","admin123"); B=os.getenv("MINIO_BUCKET","ms-exports")
def _ensure(): os.makedirs(ED,exist_ok=True)
def save_notes_md(pid,lines): _ensure(); p=os.path.join(ED,f"notes-{pid}.md"); open(p,"w",encoding="utf-8").write("\n".join(lines)); return p
def save_datapack_json(pid,data): _ensure(); p=os.path.join(ED,f"datapack-{pid}.json"); open(p,"w",encoding="utf-8").write(json.dumps(data,indent=2)); return p
def save_marp_markdown(pid,title,secs):
    _ensure(); p=os.path.join(ED,f"slides-{pid}.md"); L=["---","marp: true","theme: default","paginate: true","---",f"# {title}",""]
    for s in secs:
        L.append(f"## {s.get('title','Section')}"); [L.append(f"- {b.get('text','')} ({b.get('citation_key','')})") for b in s.get('bullets',[])]; L.append("")
    open(p,"w",encoding="utf-8").write("\n".join(L)); return p
def render_html_from_markdown(md_path,pid):
    _ensure(); html=f"<!doctype html><html><head><meta charset='utf-8'><title>Pack {pid}</title></head><body>{md_to_html(open(md_path,'r',encoding='utf-8').read())}</body></html>"
    out=os.path.join(ED,f"pack-{pid}.html"); open(out,"w",encoding="utf-8").write(html); return out
def render_pdf_simple(pid,title,secs):
    _ensure(); out=os.path.join(ED,f"pack-{pid}.pdf"); c=canvas.Canvas(out,pagesize=letter); w,h=letter; y=h-72; c.setFont("Helvetica-Bold",16); c.drawString(72,y,title); y-=24; c.setFont("Helvetica",11)
    for s in secs:
        c.drawString(72,y,f"Section: {s.get('title','')}"); y-=18
        for b in s.get("bullets",[]):
            c.drawString(84,y,(f"- {b.get('text','')} ({b.get('citation_key','')})")[:100]); y-=14
            if y<100: c.showPage(); y=h-72
    c.showPage(); c.save(); return out
def render_pptx(pid,title,secs):
    _ensure(); from pptx.util import Inches
    prs=Presentation(); s=prs.slides.add_slide(prs.slide_layouts[0]); s.shapes.title.text=title; s.placeholders[1].text="Generated by Multimedia Sourcer"
    for sec in secs:
        sl=prs.slides.add_slide(prs.slide_layouts[1]); sl.shapes.title.text=sec.get("title","Section"); tf=sl.placeholders[1].text_frame; tf.clear()
        for b in sec.get("bullets",[]): p=tf.add_paragraph(); p.text=f"{b.get('text','')} ({b.get('citation_key','')})"; p.level=0
    out=os.path.join(ED,f"pack-{pid}.pptx"); prs.save(out); return out
def upload_to_minio(local_path):
    s3=boto3.client("s3",endpoint_url=ME,aws_access_key_id=AK,aws_secret_access_key=SK,region_name="us-east-1"); k=os.path.basename(local_path); s3.upload_file(local_path,B,k); return f"s3://{B}/{k}"
